{{DF this 'id' (UID)}}
<div class='RR relative'>
  <div id='_BaseSwiper-{{id}}' class='swiper _BaseSwiper'>
    <div id='_BaseSwiper-{{id}}-Navigation' class='RR _BaseSwiper-Navigation'>
      <div class='NavBtn PrevBtn'>
        <img src='/icon/swiper/prev_btn.svg' alt='' />
      </div>
      <div class='NavBtn NextBtn'>
        <img src='/icon/swiper/next_btn.svg' alt='' />
      </div>
    </div>
    <div class='swiper-wrapper'>
      {{#LOOP 5}}
        <div class='RR swiper-slide' data-key='{{index}}'>
          <div>
            <img style='display:block; width:100%; aspect-ratio:560/315;' src='https://picsum.photos/560/315.jpg?random={{index}}' alt='' />
          </div>
          <div>{{number}}</div>
        </div>
      {{/LOOP}}
    </div>
  </div>
  <br />
  <div id='_BaseSwiper-{{id}}-Pagenation' class='RR _BaseSwiper-Pagenation'></div>
  <br />
  <div id='_BaseSwiper-{{id}}-PagenationProgressbar' class='RR _BaseSwiper-PagenationProgressbar'></div>
  <br />
  <div id='_BaseSwiper-{{id}}-PagenationFraction' class='RR _BaseSwiper-PagenationFraction'>
    <div class='current'></div>
    <div class='bar'>/</div>
    <div class='total'></div>
  </div>
  {{!--prettier-ignore--}}
  <script>
    window.addEventListener('DOMContentLoaded', (evt) => {
      const navigation = {
        disabledClass: 'Disabled',
        hiddenClass: 'Hidden',
        prevEl: '#_BaseSwiper-{{id}}-Navigation > .PrevBtn',
        nextEl: '#_BaseSwiper-{{id}}-Navigation > .NextBtn',
      };
      
      const pagination_bullet = {
        el: '#_BaseSwiper-{{id}}-Pagenation',
        type: 'bullets',
        clickable: true,
        modifierClass: 'Pagenation-',
        bulletClass: 'Dot',
        bulletActiveClass: 'On',
        renderBullet: function (index, className) {
          const num = (index + 1).toString().padStart(2, '0');
          return `<div class="${className}"> <div class="Num">${num}</div> <div class="Circle"></div> </div>`;
        },
      };
      
      const pagination_progress = {
        el: '#_BaseSwiper-{{id}}-PagenationProgressbar',
        type: 'progressbar',
        modifierClass: 'Pagenation-',
        progressbarFillClass: 'FillBar',
        renderProgressbar: function (className) {
          return `<div class="${className}"></div>`;
        },
      };
      
      const swiper_option = {
        slidesPerView: 3, // 슬라이드의 수가 slidesPerView의 값 2배 이상이어야함. slidesPerView, slidesPerGroup 함께 설정 필요.
        slidesPerGroup: 1,
        spaceBetween: 10,
        loop: false,
        navigation: navigation,
        pagination: pagination_bullet,
        // pagination: pagination_progress,
        // autoplay: {
        //   delay: 1000,
        //   disableOnInteraction: false,
        // },
        init: false,
        // grabCursor: true,
      };
      
      const update_current_num = () => {
        const el_total = document.querySelector('#_BaseSwiper-{{id}}-PagenationFraction > .total');
        if (!el_total) return;
        
        const slides = document.querySelectorAll('#_BaseSwiper-{{id}} .swiper-slide');
        const real_length = slides.length;
        el_total.textContent = real_length;
        
        const el_current = document.querySelector('#_BaseSwiper-{{id}}-PagenationFraction > .current');
        el_current.textContent = swiper.realIndex + 1;
      };
      
      let swiper = new Swiper('#_BaseSwiper-{{id}}', swiper_option);
      
      swiper.on('init', function () {
        // console.log('init');
        update_current_num();
      });
      
      swiper.on('slideChange', function () {
        // console.log('slideChange');
        update_current_num();
      });
      
      swiper.on('slideChangeTransitionEnd', function () {
        // console.log('slideChangeTransitionEnd');
      });
      
      swiper.on('reachBeginning', function () {
        // console.log('reachBeginning');
      });
      
      swiper.on('reachEnd', function () {
        // console.log('reachEnd');
      });
      
      swiper.init();
    });
  </script>
</div>